basePath: /api/v1
definitions:
  model.CreateUser:
    properties:
      address:
        description: Address user
        type: string
      age:
        description: Age user
        type: integer
      email:
        description: Email user
        type: string
      name:
        description: Name user
        type: string
      password:
        description: Password user
        type: string
    type: object
  model.UpdateUser:
    properties:
      address:
        description: Address user
        type: string
      age:
        description: Age user
        type: integer
      email:
        description: Email user
        type: string
      name:
        description: Name user
        type: string
      password:
        description: Password user
        type: string
    type: object
host: localhost:8000
info:
  contact: {}
  description: Swagger documentation API for user.
  termsOfService: http://swagger.io/terms/
  title: API Users Golang POC - VerifyMyAge Company
paths:
  /users:
    get:
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "204":
          description: No Content
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Retrieves user based on given limit, name and page
      tags:
      - Users-endpoints
    post:
      parameters:
      - description: User Create
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Create New User
      tags:
      - Users-endpoints
  /users/{id}:
    delete:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Delete User
      tags:
      - Users-endpoints
    get:
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Retrieves user based on given ID
      tags:
      - Users-endpoints
    put:
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      - description: User Update
        in: body
        name: User
        required: true
        schema:
          $ref: '#/definitions/model.UpdateUser'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request
          schema:
            additionalProperties: true
            type: object
      summary: Update User
      tags:
      - Users-endpoints
swagger: "2.0"
